 1	#include <sys/types.h>
 2	#include <sys/socket.h>
 3	#include <netinet/in.h>
 4	#include <netdb.h>
 5	#include <unistd.h>
 6	#include <string.h>
 7	#include <stdio.h>
 8	#include <stdlib.h>
 9	#define PORT 10130
10
11	int main(int argc, char **argv) {
12	  int sock, csock; /* クライアントを受け付けたソケット*/
13	  struct sockaddr_in svr;
14	  struct sockaddr_in clt;
15	  struct hostent *cp;
16	  int clen;
17	  char sbuf[1024], cbuf[1024];
18	  int nbytes;
19	  int reuse;
20	  fd_set rfds; /* select() で用いるファイル記述子集合*/
21	  struct timeval tv; /* select() が返ってくるまでの待ち時間を指定する変数*/
22
23	  /* ソケットの生成 */
24	  if ((sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0) {
25	    perror("socket");
26	    exit(1);
27	  }
28
29	  /* ソケットアドレス再利用の指定 */
30	  reuse = 1;
31	  if(setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) < 0) {
32	    perror("setsockopt");
33	    exit(1);
34	  }
35
36	  /* client 受付用ソケットの情報設定 */
37	  bzero(&svr, sizeof(svr));
38	  svr.sin_family = AF_INET;
39	  svr.sin_addr.s_addr = htonl(INADDR_ANY);
40
41	  /* 受付側の IP アドレスは任意 */
42	  svr.sin_port = htons(PORT); /* ポート番号 10130 を介して受け付ける */
43
44	  /* ソケットにソケットアドレスを割り当てる */
45	  if(bind(sock, (struct sockaddr *)&svr, sizeof(svr)) < 0) {
46	    perror("bind");
47	    exit(1);
48	  }
49
50	  /* 待ち受けクライアント数の設定 */
51	  if(listen(sock, 5) < 0) { /* 待ち受け数に 5 を指定 */
52	    perror("listen");
53	    exit(1);
54	  }
55	  do {
56
57	    /* クライアントの受付 */
58	    clen = sizeof(clt);
59	    if ((csock = accept(sock, (struct sockaddr *)&clt, &clen)) < 0) {
60	      perror("accept");
61	      exit(2);
62	    }
63
64	    /* クライアントのホスト情報の取得 */
65	    cp = gethostbyaddr((char *)&clt.sin_addr, sizeof(struct in_addr), AF_INET);
66	    printf("[%s]\n", cp->h_name);
67	    printf("connected\n");
68
69	    nbytes = -1;
70
71	    do{
72	      /* 入力を監視するファイル記述子の集合を変数rfds にセットする*/
73	      FD_ZERO(&rfds); /* rfds を空集合に初期化*/
74	      FD_SET(0, &rfds); /* 標準入力*/
75	      FD_SET(csock, &rfds); /* クライアントを受け付けたソケット*/
76	      /* 監視する待ち時間を1 秒に設定*/
77	      tv.tv_sec = 1;
78	      tv.tv_usec = 0;
79	      memset(sbuf, '\0', sizeof(sbuf));
80	      memset(cbuf, '\0', sizeof(cbuf));
81
82	      /* 標準入力とソケットからの受信を同時に監視する */
83	      if(select(csock+1, &rfds, NULL, NULL, &tv) > 0) {
84	        if(FD_ISSET(0, &rfds)) { /* 標準入力から入力があったなら*/
85	          if((nbytes = read(0, sbuf, sizeof(sbuf))) > 0){ /*標準入力から読み込みクライアントに送信 */
86	            write(csock, sbuf, nbytes);
87	          }
88	        }
89	        if(FD_ISSET(csock, &rfds)) { /* ソケットから受信したなら*/
90	        /* ソケットから読み込み端末に出力*/
91	         if((nbytes = read(csock, cbuf, sizeof(cbuf))) > 0){
92	            write(1, cbuf, nbytes);
93	         }
94	        }
95	      }
96	    } while (nbytes != 0);
97
98	    /* read() が 0 を返すまで (=End-Of-File) 繰り返す */
99	    close(csock);
100	    printf("closed\n");
101	  } while(1); /* 繰り返す*/
102	}
